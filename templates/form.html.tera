{% extends "base" %}

{% block title %}Lights!{% endblock title %}

{% block head %}
{{ super() }}
<link href="static/vendor/color-picker/color-picker.min.css" rel="stylesheet"/>
<style>
	input[type=color].is-static:active {
		background: #ddd;
	}

	.color-picker__control--a {
		display: none;
	}

	.color-picker__dialog--static {
		display: inline-block;
		position: static;
		left: 0 !important;
		top: 0 !important;
		box-shadow: none;
	}
</style>
{% endblock head %}

{% block content %}
<h1>Lights!</h1>
<form id="color_form" method="post">
	<p id="color_picker"></p>
	<input id="color" name="color" type="color" value="{{ color }}"/>
	<p>White Channel</p>
	<input id="white_color" name="white_color" type="color" value="{{ white_color }}"/>
	<p></p>
	<button id="color_submit" type="submit">Set</button>
</form>
<script src="static/vendor/color-picker/color-picker.min.js"></script>
<script>
	let ws = null;
	let wsinfo = null;

	const element = document.getElementById('color');

	const picker = new CP(element);
	element.classList.add('is-static');
	element.addEventListener('click', ev => ev.preventDefault());

	let current = picker.source.value;

	picker.on('blur', () => {});
	picker.on('focus', () => {});
	picker.on('change', function (red, green, blue) {
		this.source.value = this.color(red, green, blue, 1);

		if (ws && picker.source.value === current) {
			document.getElementById(this.source.name + '_submit').disabled = true;
		}
		else {
			document.getElementById(this.source.name + '_submit').disabled = false;
		}
	});
	picker.self.classList.add(picker.state.class + '__dialog--static');
	picker.enter(document.getElementById(picker.source.name + '_picker'));

	function num2hex(num) {
		return ('0' + (num).toString(16)).slice(-2);
	}

	function hex2num(hex) {
		return parseInt(hex, 16);
	}

	function encodeColor(color, white) {
    		return '#' + num2hex(color['red']) + num2hex(color['green']) + num2hex(color['blue']) + num2hex(white);
	}

	function decodeColor(str) {
		return {
			'red': hex2num(str.slice(1, 3)),
			'green': hex2num(str.slice(3, 5)),
			'blue': hex2num(str.slice(5, 7)),
			'white': hex2num(str.slice(7, 9)),  // Weiß-Wert hinzufügen
		};
	}

	function submitWebSocket(ev) {
    		// Weißwert auch an den WebSocket senden
    		const white = hex2num(document.getElementById('white_color').value.slice(1, 3));
    		const colorData = decodeColor(picker.source.value);
    		ws.send(JSON.stringify({
        	...colorData,
        	'white': white
    		}));

    		current = picker.source.value;
	    	document.getElementById(picker.source.name + '_submit').disabled = true;
    		ev.preventDefault();
	}

	function connectWebSocket() {
		ws = new WebSocket(wsinfo);

		ws.addEventListener('open', () => {
			document.getElementById(picker.source.name + '_form').addEventListener('submit', submitWebSocket);
		});

		ws.addEventListener('message', (ev) => {
    			const color = JSON.parse(ev.data);

    			if (picker.source.value === current) {
        			const encoded = encodeColor(color, color.white);  // Weiß-Wert einbeziehen

        			picker.source.value = encoded;
        			picker.set(color['red'], color['green'], color['blue']);

        			current = encoded;

        			document.getElementById(picker.source.name + '_submit').disabled = true;
    			}
		});


		ws.addEventListener('close', () => {
			document.getElementById(picker.source.name + '_form').removeEventListener('submit', submitWebSocket);
			document.getElementById(picker.source.name + '_submit').disabled = false;

			ws = null;

			setTimeout(connectWebSocket, 5000);
		});
	}

	const xhr = new XMLHttpRequest();

	xhr.addEventListener('load', () => {
		wsinfo = xhr.responseText || (window.location.protocol.replace('http', 'ws') + '//' + window.location.hostname + ':8001' + '/');

		connectWebSocket();
	});
	xhr.open('GET', '/wsinfo');
	xhr.send();
</script>
{% endblock content %}
